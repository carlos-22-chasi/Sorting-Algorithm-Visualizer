import React from 'react';
import {getMergeSortAnimations} from '../SortingAlgorithms/MergeSort.js';
import {getQuickSortAnimations} from '../SortingAlgorithms/QuickSort.js';
import {getBubbleSortAnimations} from '../SortingAlgorithms/BubbleSort.js';
import {getInsertionSortAnimations} from '../SortingAlgorithms/InsertionSort.js';
import {getSelectionSortAnimations} from '../SortingAlgorithms/SelectionSort.js';


import './SortingVisualizer.css';

// Change this value for the speed of the animations.
const ANIMATION_SPEED_MS = 200;

// Change this value for the number of bars (value) in the array.
const NUMBER_OF_ARRAY_BARS = 8;

// This is the main color of the array bars.
const PRIMARY_COLOR = 'turquoise';

// This is the color of array bars that are being compared throughout the animations.
const SECONDARY_COLOR = 'red';

export default class SortingVisualizer extends React.Component {
  constructor(props) {
    super(props);

    this.state = {
      array: [],
      isAnimating: false
    };
  }

  componentDidMount() {
    this.resetArray();
  }

  resetArray() {
    // const array = [];
    // for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {
    //   array.push(randomIntFromInterval(5, 600));
    // }
    const array = [200,600,500,300,700,400,100]
    this.setState({array: array});
  }

  mergeSort() {
      // Get the list of animations generated by the merge sort algorithm
      const animations = getMergeSortAnimations(this.state.array);
      console.log(animations);
      this.animate(animations);
  }
  quickSort() {
    // Get the list of animations generated by the quick sort algorithm
    const animations = getQuickSortAnimations(this.state.array);
    this.animate(animations);

  }

  bubbleSort() {
    // Get the list of animations generated by the merge sort algorithm
    const animations = getBubbleSortAnimations(this.state.array);
    this.animate(animations);
  }

  insertionSort() {
    // Get the list of animations generated by the insertion sort algorithm
    const animations = getInsertionSortAnimations(this.state.array);
    this.animate(animations);
  }

  selectionSort(){
    // Get the list of animations generated by the insertion sort algorithm
    const animations = getSelectionSortAnimations(this.state.array);
    this.animate(animations);
  }

  animate(animations) {
    this.setState({ isAnimating: true }, () => {
    // Loop through each animation step
    for (let i = 0; i < animations.length; i++) {
      const arrayBars = document.getElementsByClassName('array-bar');
      const action = animations[i][0];

      if (action === "compare" || action === "revert") {
        const [barOneIdx, barTwoIdx] = [animations[i][1], animations[i][2]];
        // If the action is "compare" then change color to secondary color, else change to primary color
        const color = action === "compare" ? SECONDARY_COLOR : PRIMARY_COLOR;
        // Change the color of the two bars being compared after a certain amount of time
        setTimeout(() => {
          const barOneStyle = arrayBars[barOneIdx].style;
          const barTwoStyle = arrayBars[barTwoIdx].style;

          barOneStyle.backgroundColor = color;
          barTwoStyle.backgroundColor = color;
        }, i * ANIMATION_SPEED_MS);
      } 
      // If the action is swap, then we change the height of the bars to give a swapping effect
      else if (action === "swap") {
        const [barOneIdx, newHeightOne, barTwoIdx, newHeightTwo] = [animations[i][1], animations[i][2], animations[i][3], animations[i][4]];
        // swap the heights of the two bars after a certain amount of time
        setTimeout(() => {
            const barOneStyle = arrayBars[barOneIdx].style;
            const barTwoStyle = arrayBars[barTwoIdx].style;

            barOneStyle.height = `${newHeightOne}px`;
            barTwoStyle.height = `${newHeightTwo}px`;

        }, i * ANIMATION_SPEED_MS);
      }
      else if (action === "overwrite"){
        const [barOneIdx, newHeightOne] = [animations[i][1], animations[i][2]];
        setTimeout(() => {
          const barOneStyle = arrayBars[barOneIdx].style;
          const barOneValue = arrayBars[barOneIdx];

          barOneStyle.height = `${newHeightOne}px`;
          barOneValue.textContent = newHeightOne;

      }, i * ANIMATION_SPEED_MS);
      }
    } 
    setTimeout(() => {
      this.setState({ isAnimating: false });
    },  animations.length * ANIMATION_SPEED_MS);
    });
  }

  render() {
    const {array} = this.state;

    return (
      <div className='main'>
        <div className="array-container">
          {array.map((value, idx) => (
            <div className="array-bar" key={idx}
              style={{
                backgroundColor: PRIMARY_COLOR,
                height: `${value}px`,
              }}>
                {value}
              </div>
          ))}
        </div>
        <div className='button-container'>
          <button onClick={() => window.location.reload()}>Generate New Array</button>
          <button onClick={() => this.mergeSort()} disabled = {this.state.isAnimating}>Merge Sort</button>
          <button onClick={() => this.quickSort()} disabled = {this.state.isAnimating}>Quick Sort</button>
          <button onClick={() => this.bubbleSort()} disabled = {this.state.isAnimating}>Bubble Sort</button>
          <button onClick={() => this.insertionSort()} disabled = {this.state.isAnimating}>Insertion Sort</button>
          <button onClick={() => this.selectionSort()} disabled = {this.state.isAnimating}>Selection Sort</button>

        </div>
      </div>
    );
  }
}

// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript
function randomIntFromInterval(min, max) {
  // min and max included
  return Math.floor(Math.random() * (max - min + 1) + min);
}
